import asyncio
import logging
from typing import Optional
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatAction
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_ID, UMA_WEBSITE
from database import Database
from groq_client import GroqClient
from keyboards import (
	get_main_keyboard, get_chat_keyboard, get_admin_keyboard,
	get_settings_keyboard, get_about_keyboard, get_broadcast_keyboard,
)
from broadcast_scheduler import BroadcastScheduler

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Helpers
def build_file_url(token: str, file_path: str) -> str:
	return f"https://api.telegram.org/file/bot{token}/{file_path}"

class UmaBot:
	def __init__(self) -> None:
		self.database = Database()
		self.groq_client = GroqClient()
		self.user_states: dict[int, str] = {}
		self.user_locks: dict[int, asyncio.Lock] = {}  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		self.bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
		self.dp = Dispatcher()
		self.scheduler = BroadcastScheduler(self.bot, self.database)
		self._register_handlers()

	def _get_user_lock(self, user_id: int) -> asyncio.Lock:
		"""–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
		if user_id not in self.user_locks:
			self.user_locks[user_id] = asyncio.Lock()
		return self.user_locks[user_id]

	async def _safe_edit_text(self, message, text: str, reply_markup=None):
		"""–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
		try:
			await message.edit_text(text, reply_markup=reply_markup)
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
			# –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
			if "message is not modified" in str(e):
				try:
					await message.delete()
					await message.answer(text, reply_markup=reply_markup)
				except Exception as e2:
					logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
			else:
				# –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				try:
					await message.answer(text, reply_markup=reply_markup)
				except Exception as e2:
					logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

	async def _split_long_message(self, text: str, max_length: int = 4096) -> list[str]:
		"""–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
		if len(text) <= max_length:
			return [text]
		
		messages = []
		current_pos = 0
		
		while current_pos < len(text):
			# –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—É)
			end_pos = current_pos + max_length
			
			if end_pos >= len(text):
				messages.append(text[current_pos:])
				break
			
			# –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
			last_newline = text.rfind('\n', current_pos, end_pos)
			last_space = text.rfind(' ', current_pos, end_pos)
			
			if last_newline > current_pos:
				split_pos = last_newline + 1
			elif last_space > current_pos:
				split_pos = last_space + 1
			else:
				split_pos = end_pos
			
			messages.append(text[current_pos:split_pos].rstrip())
			current_pos = split_pos
		
		return messages

	async def _process_user_message(self, user_id: int, message_type: str, **kwargs) -> str:
		"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
		async with self._get_user_lock(user_id):
			history = self.database.get_conversation_history(user_id)
			
			if message_type == "text":
				text = kwargs.get("text", "")
				use_search = self.groq_client.should_use_browser_search(text)
				return await self.groq_client.process_text_message(
					text=text, 
					conversation_history=history, 
					use_browser_search=use_search
				)
			elif message_type == "image":
				image_url = kwargs.get("image_url", "")
				text = kwargs.get("text", "")
				return await self.groq_client.process_image_message(
					image_url=image_url, 
					text=text, 
					conversation_history=history
				)
			elif message_type == "images":
				image_urls = kwargs.get("image_urls", [])
				text = kwargs.get("text", "")
				return await self.groq_client.process_multiple_images_message(
					image_urls=image_urls, 
					text=text, 
					conversation_history=history
				)
			elif message_type == "audio":
				audio_url = kwargs.get("audio_url", "")
				return await self.groq_client.process_audio_message(
					audio_url=audio_url, 
					conversation_history=history
				)
			else:
				return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"

	async def _handle_media_group_item(self, message: Message, user):
		"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞)"""
		media_group_id = message.media_group_id
		
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
		if media_group_id not in self.media_groups:
			self.media_groups[media_group_id] = {
				'messages': [],
				'user_id': user.id,
				'chat_id': message.chat.id,
				'typing_message': None
			}
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
			typing_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
			self.media_groups[media_group_id]['typing_message'] = typing_message
		
		# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
		self.media_groups[media_group_id]['messages'].append(message)
		
		# –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∞–ª—å–±–æ–º–∞
		await asyncio.sleep(1)
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å—ë –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç—É –≥—Ä—É–ø–ø—É
		if media_group_id in self.media_groups:
			group_data = self.media_groups[media_group_id]
			messages = group_data['messages']
			typing_message = group_data['typing_message']
			
			# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
			image_urls = []
			captions = []
			
			for msg in messages:
				if msg.photo:
					file_id = msg.photo[-1].file_id
					file = await self.bot.get_file(file_id)
					image_url = build_file_url(TELEGRAM_BOT_TOKEN, file.file_path)
					image_urls.append(image_url)
					if msg.caption:
						captions.append(msg.caption)
			
			# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∏
			combined_caption = " ".join(captions) if captions else ""
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
			response = await self._process_user_message(
				user.id,
				"images",
				image_urls=image_urls,
				text=combined_caption
			)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
			self.database.add_message_to_conversation(
				user.id,
				{"image_urls": image_urls, "caption": combined_caption, "type": "images", "timestamp": message.date.isoformat()},
				response
			)
			
			# –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
			message_parts = await self._split_long_message(response)
			
			# –ó–∞–º–µ–Ω—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
			await self._safe_edit_text(typing_message, message_parts[0], get_chat_keyboard() if len(message_parts) == 1 else None)
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
			for i, part in enumerate(message_parts[1:], 1):
				is_last = i == len(message_parts) - 1
				await message.answer(part, reply_markup=get_chat_keyboard() if is_last else None)
			
			# –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–∞–º—è—Ç–∏
			if media_group_id in self.media_groups:
				del self.media_groups[media_group_id]

	def _register_handlers(self) -> None:
		@self.dp.message(Command("start"))
		async def start_cmd(message: Message):
			user = message.from_user
			if user:
				self.database.add_user(user.id, user.username, user.first_name)
			welcome_text = (
				"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Uma Bot!\n\n"
				"–Ø ‚Äî —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
				"‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
				"‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å\n‚Ä¢ –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
				"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
			)
			await message.answer(welcome_text, reply_markup=get_main_keyboard())

		@self.dp.message(Command("admin"))
		async def admin_cmd(message: Message):
			user = message.from_user
			if user and user.id == ADMIN_USER_ID:
				stats = self.database.get_statistics()
				admin_text = (
					f"üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Uma Bot\n\n"
					f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
					f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
					f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}\n"
					f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n\n"
					f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
				)
				await message.answer(admin_text, reply_markup=get_admin_keyboard())
			else:
				await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

		# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
		self.media_groups = {}
		
		@self.dp.message(F.photo)
		async def handle_photo(message: Message):
			user = message.from_user
			if not user:
				return
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
			if message.media_group_id:
				# –≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
				await self._handle_media_group_item(message, user)
				return
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ
			typing_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
			
			await self.bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)
			
			file_id = message.photo[-1].file_id
			file = await self.bot.get_file(file_id)
			image_url = build_file_url(TELEGRAM_BOT_TOKEN, file.file_path)
			caption = message.caption or ""
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			response = await self._process_user_message(
				user.id, 
				"image", 
				image_url=image_url, 
				text=caption
			)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
			self.database.add_message_to_conversation(
				user.id, 
				{"image_url": image_url, "caption": caption, "type": "image", "timestamp": message.date.isoformat()}, 
				response
			)
			
			# –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
			message_parts = await self._split_long_message(response)
			
			# –ó–∞–º–µ–Ω—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
			await self._safe_edit_text(typing_message, message_parts[0], get_chat_keyboard() if len(message_parts) == 1 else None)
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
			for i, part in enumerate(message_parts[1:], 1):
				is_last = i == len(message_parts) - 1
				await message.answer(part, reply_markup=get_chat_keyboard() if is_last else None)

		@self.dp.message(F.voice)
		async def handle_voice(message: Message):
			user = message.from_user
			if not user:
				return
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ
			typing_message = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
			
			await self.bot.send_chat_action(message.chat.id, ChatAction.RECORD_VOICE)
			
			file_id = message.voice.file_id
			file = await self.bot.get_file(file_id)
			audio_url = build_file_url(TELEGRAM_BOT_TOKEN, file.file_path)
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			response = await self._process_user_message(
				user.id, 
				"audio", 
				audio_url=audio_url
			)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
			self.database.add_message_to_conversation(
				user.id, 
				{"audio_url": audio_url, "type": "audio", "timestamp": message.date.isoformat()}, 
				response
			)
			
			# –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
			message_parts = await self._split_long_message(response)
			
			# –ó–∞–º–µ–Ω—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
			await self._safe_edit_text(typing_message, message_parts[0], get_chat_keyboard() if len(message_parts) == 1 else None)
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
			for i, part in enumerate(message_parts[1:], 1):
				is_last = i == len(message_parts) - 1
				await message.answer(part, reply_markup=get_chat_keyboard() if is_last else None)

		@self.dp.message(F.audio)
		async def handle_audio_file(message: Message):
			user = message.from_user
			if not user:
				return
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ
			typing_message = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
			
			await self.bot.send_chat_action(message.chat.id, ChatAction.RECORD_VOICE)
			
			file_id = message.audio.file_id
			file = await self.bot.get_file(file_id)
			audio_url = build_file_url(TELEGRAM_BOT_TOKEN, file.file_path)
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			response = await self._process_user_message(
				user.id, 
				"audio", 
				audio_url=audio_url
			)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
			self.database.add_message_to_conversation(
				user.id, 
				{"audio_url": audio_url, "type": "audio", "timestamp": message.date.isoformat()}, 
				response
			)
			
			# –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
			message_parts = await self._split_long_message(response)
			
			# –ó–∞–º–µ–Ω—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
			await self._safe_edit_text(typing_message, message_parts[0], get_chat_keyboard() if len(message_parts) == 1 else None)
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
			for i, part in enumerate(message_parts[1:], 1):
				is_last = i == len(message_parts) - 1
				await message.answer(part, reply_markup=get_chat_keyboard() if is_last else None)

		@self.dp.message(F.document)
		async def handle_document(message: Message):
			doc = message.document
			if not doc:
				return
			
			mime = (doc.mime_type or "").lower()
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
			if mime.startswith("image/"):
				await handle_photo(message)
			elif mime.startswith("audio/"):
				await handle_audio_file(message)
			else:
				await message.answer(
					"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —ç—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≥–æ–ª–æ—Å.", 
					reply_markup=get_chat_keyboard()
				)

		@self.dp.message(F.text)
		async def handle_text(message: Message):
			user = message.from_user
			if not user:
				return
			
			text = message.text or ""
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if user.id in self.user_states:
				state = self.user_states[user.id]
				if state == "waiting_broadcast_message":
					# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
					result = await self.scheduler.send_manual_broadcast(text)
					del self.user_states[user.id]
					await message.answer(f"‚úÖ {result}", reply_markup=get_admin_keyboard())
					return
				elif state == "waiting_schedule_time":
					# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
					try:
						from datetime import datetime
						scheduled_time = datetime.strptime(text, "%d.%m.%Y %H:%M")
						# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
						del self.user_states[user.id]
						await message.answer(
							f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}", 
							reply_markup=get_admin_keyboard()
						)
					except ValueError:
						await message.answer(
							"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY HH:MM\n"
							"–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08.2025 14:30",
							reply_markup=get_admin_keyboard()
						)
					return
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ
			typing_message = await message.answer("–£–∂–µ –ø–∏—à—É...")
			
			# –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await self.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
			
			response = await self._process_user_message(
				user.id, 
				"text", 
				text=text
			)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
			self.database.add_message_to_conversation(
				user.id, 
				{"text": text, "type": "text", "timestamp": message.date.isoformat()}, 
				response
			)
			
			# –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
			message_parts = await self._split_long_message(response)
			
			# –ó–∞–º–µ–Ω—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
			await self._safe_edit_text(typing_message, message_parts[0], get_chat_keyboard() if len(message_parts) == 1 else None)
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
			for i, part in enumerate(message_parts[1:], 1):
				is_last = i == len(message_parts) - 1
				await message.answer(part, reply_markup=get_chat_keyboard() if is_last else None)

		@self.dp.callback_query()
		async def callbacks(query: CallbackQuery):
			user = query.from_user
			data = query.data or ""
			
			if not user:
				return

			try:
				# –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
				await query.answer()
				
				if data == "new_dialog":
					self.database.clear_conversation(user.id)
					await self._safe_edit_text(query.message, "üí¨ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", get_chat_keyboard())
				elif data == "settings":
					await self._safe_edit_text(query.message, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.", get_settings_keyboard())
				elif data == "about":
					about_text = (
						"‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ Uma Bot\n\n"
						"Uma Bot ‚Äî —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
						"‚Ä¢ üí¨ –î–∏–∞–ª–æ–≥–∏\n‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n‚Ä¢ üé§ –†–µ—á—å\n‚Ä¢ üîç –ü–æ–∏—Å–∫\n\n"
						"üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ:"
					)
					await self._safe_edit_text(query.message, about_text, get_about_keyboard())
				elif data == "main_menu":
					await self._safe_edit_text(query.message, "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Uma Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", get_main_keyboard())
				elif data == "clear_history":
					self.database.clear_conversation(user.id)
					await self._safe_edit_text(query.message, "üóë –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!", get_main_keyboard())
				elif data == "regenerate":
					history = self.database.get_conversation_history(user.id, limit=1)
					if history:
						last_message = history[-1]["message"]
						if last_message.get("type") == "text":
							resp = await self._process_user_message(
								user.id, 
								"text", 
								text=last_message["text"]
							)
							self.database.add_message_to_conversation(user.id, last_message, resp)
							await self._safe_edit_text(query.message, resp, get_chat_keyboard())
						else:
							await query.message.answer("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞")
					else:
						await query.message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
				elif data == "history":
					h = self.database.get_conversation_history(user.id, limit=5)
					if h:
						text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
						for i, entry in enumerate(h[-5:], 1):
							msg = entry["message"]
							if msg.get("type") == "text":
								val = msg["text"]
								text += f"{i}. {val[:50]}{'...' if len(val)>50 else ''}\n"
							elif msg.get("type") == "image":
								text += f"{i}. [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]\n"
							elif msg.get("type") == "audio":
								text += f"{i}. [–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
						await self._safe_edit_text(query.message, text, get_chat_keyboard())
					else:
						await query.message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
				elif data == "share":
					await query.message.answer("–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ")
				
				# –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
				elif data == "admin_panel" and user.id == ADMIN_USER_ID:
					stats = self.database.get_statistics()
					admin_text = (
						f"üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Uma Bot\n\n"
						f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
						f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
						f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}\n"
						f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n\n"
						f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
					)
					await self._safe_edit_text(query.message, admin_text, get_admin_keyboard())
				elif data == "admin_broadcast" and user.id == ADMIN_USER_ID:
					await self._safe_edit_text(query.message, 
						"üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏\n\n"
						"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
						"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
						"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫\n\n"
						"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", get_admin_keyboard())
				elif data == "admin_message" and user.id == ADMIN_USER_ID:
					self.user_states[user.id] = "waiting_broadcast_message"
					await self._safe_edit_text(query.message,
						"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
						"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
						"**–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, [—Å—Å—ã–ª–∫–∞](url)", get_admin_keyboard())
				elif data == "admin_scheduler" and user.id == ADMIN_USER_ID:
					self.user_states[user.id] = "waiting_schedule_time"
					await self._safe_edit_text(query.message,
						"üóì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫\n\n"
						"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
						"DD.MM.YYYY HH:MM\n\n"
						"–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08.2025 14:30", get_admin_keyboard())
				elif data == "admin_send_broadcast" and user.id == ADMIN_USER_ID:
					result = await self.scheduler.send_manual_broadcast("üöÄ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞!")
					await self._safe_edit_text(query.message, f"‚úÖ {result}", get_admin_keyboard())
				elif data == "admin_stats" and user.id == ADMIN_USER_ID:
					stats = self.database.get_statistics()
					stats_text = (
						f"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
						f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
						f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
						f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}\n"
						f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_this_week']}\n\n"
						f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è:\n"
						f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_messages']}\n"
						f"‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {stats['text_messages']}\n"
						f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['image_messages']}\n"
						f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {stats['audio_messages']}\n\n"
						f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
						f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['messages_today']}\n"
						f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['messages_this_week']}"
					)
					await self._safe_edit_text(query.message, stats_text, get_admin_keyboard())
				elif data == "admin_back" and user.id == ADMIN_USER_ID:
					await self._safe_edit_text(query.message, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", get_admin_keyboard())
			except Exception as e:
				logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
				# –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ callback –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
				try:
					await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
				except:
					pass

	async def run(self) -> None:
		# –°—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ polling
		await self.scheduler.start_scheduler()
		await self.dp.start_polling(self.bot)

if __name__ == "__main__":
	async def _main():
		bot = UmaBot()
		await bot.run()
	asyncio.run(_main())
